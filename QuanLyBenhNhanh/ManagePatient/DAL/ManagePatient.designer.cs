#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLHospital")]
	public partial class ManagePatientDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRoomInfo(RoomInfo instance);
    partial void UpdateRoomInfo(RoomInfo instance);
    partial void DeleteRoomInfo(RoomInfo instance);
    partial void InsertPatientInfo(PatientInfo instance);
    partial void UpdatePatientInfo(PatientInfo instance);
    partial void DeletePatientInfo(PatientInfo instance);
    #endregion
		
		public ManagePatientDataContext() : 
				base(global::DAL.Properties.Settings.Default.QLHospitalConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ManagePatientDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManagePatientDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManagePatientDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManagePatientDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RoomInfo> RoomInfos
		{
			get
			{
				return this.GetTable<RoomInfo>();
			}
		}
		
		public System.Data.Linq.Table<PatientInfo> PatientInfos
		{
			get
			{
				return this.GetTable<PatientInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomInfo")]
	public partial class RoomInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDRoom;
		
		private string _NameRoom;
		
		private string _CommentRoom;
		
		private EntitySet<PatientInfo> _PatientInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDRoomChanging(string value);
    partial void OnIDRoomChanged();
    partial void OnNameRoomChanging(string value);
    partial void OnNameRoomChanged();
    partial void OnCommentRoomChanging(string value);
    partial void OnCommentRoomChanged();
    #endregion
		
		public RoomInfo()
		{
			this._PatientInfos = new EntitySet<PatientInfo>(new Action<PatientInfo>(this.attach_PatientInfos), new Action<PatientInfo>(this.detach_PatientInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRoom", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDRoom
		{
			get
			{
				return this._IDRoom;
			}
			set
			{
				if ((this._IDRoom != value))
				{
					this.OnIDRoomChanging(value);
					this.SendPropertyChanging();
					this._IDRoom = value;
					this.SendPropertyChanged("IDRoom");
					this.OnIDRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRoom", DbType="NVarChar(MAX)")]
		public string NameRoom
		{
			get
			{
				return this._NameRoom;
			}
			set
			{
				if ((this._NameRoom != value))
				{
					this.OnNameRoomChanging(value);
					this.SendPropertyChanging();
					this._NameRoom = value;
					this.SendPropertyChanged("NameRoom");
					this.OnNameRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentRoom", DbType="NVarChar(MAX)")]
		public string CommentRoom
		{
			get
			{
				return this._CommentRoom;
			}
			set
			{
				if ((this._CommentRoom != value))
				{
					this.OnCommentRoomChanging(value);
					this.SendPropertyChanging();
					this._CommentRoom = value;
					this.SendPropertyChanged("CommentRoom");
					this.OnCommentRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomInfo_PatientInfo", Storage="_PatientInfos", ThisKey="IDRoom", OtherKey="IDRoom")]
		public EntitySet<PatientInfo> PatientInfos
		{
			get
			{
				return this._PatientInfos;
			}
			set
			{
				this._PatientInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientInfos(PatientInfo entity)
		{
			this.SendPropertyChanging();
			entity.RoomInfo = this;
		}
		
		private void detach_PatientInfos(PatientInfo entity)
		{
			this.SendPropertyChanging();
			entity.RoomInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientInfo")]
	public partial class PatientInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDPatient;
		
		private string _NamePatient;
		
		private string _Phone;
		
		private string _Email;
		
		private string _Address;
		
		private string _Diagnoseill;
		
		private string _IDRoom;
		
		private string _Sex;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private EntityRef<RoomInfo> _RoomInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPatientChanging(string value);
    partial void OnIDPatientChanged();
    partial void OnNamePatientChanging(string value);
    partial void OnNamePatientChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDiagnoseillChanging(string value);
    partial void OnDiagnoseillChanged();
    partial void OnIDRoomChanging(string value);
    partial void OnIDRoomChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    #endregion
		
		public PatientInfo()
		{
			this._RoomInfo = default(EntityRef<RoomInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPatient", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDPatient
		{
			get
			{
				return this._IDPatient;
			}
			set
			{
				if ((this._IDPatient != value))
				{
					this.OnIDPatientChanging(value);
					this.SendPropertyChanging();
					this._IDPatient = value;
					this.SendPropertyChanged("IDPatient");
					this.OnIDPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamePatient", DbType="NVarChar(MAX)")]
		public string NamePatient
		{
			get
			{
				return this._NamePatient;
			}
			set
			{
				if ((this._NamePatient != value))
				{
					this.OnNamePatientChanging(value);
					this.SendPropertyChanging();
					this._NamePatient = value;
					this.SendPropertyChanged("NamePatient");
					this.OnNamePatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Char(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diagnoseill", DbType="NVarChar(MAX)")]
		public string Diagnoseill
		{
			get
			{
				return this._Diagnoseill;
			}
			set
			{
				if ((this._Diagnoseill != value))
				{
					this.OnDiagnoseillChanging(value);
					this.SendPropertyChanging();
					this._Diagnoseill = value;
					this.SendPropertyChanged("Diagnoseill");
					this.OnDiagnoseillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRoom", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string IDRoom
		{
			get
			{
				return this._IDRoom;
			}
			set
			{
				if ((this._IDRoom != value))
				{
					if (this._RoomInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRoomChanging(value);
					this.SendPropertyChanging();
					this._IDRoom = value;
					this.SendPropertyChanged("IDRoom");
					this.OnIDRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="NChar(10)")]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomInfo_PatientInfo", Storage="_RoomInfo", ThisKey="IDRoom", OtherKey="IDRoom", IsForeignKey=true)]
		public RoomInfo RoomInfo
		{
			get
			{
				return this._RoomInfo.Entity;
			}
			set
			{
				RoomInfo previousValue = this._RoomInfo.Entity;
				if (((previousValue != value) 
							|| (this._RoomInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomInfo.Entity = null;
						previousValue.PatientInfos.Remove(this);
					}
					this._RoomInfo.Entity = value;
					if ((value != null))
					{
						value.PatientInfos.Add(this);
						this._IDRoom = value.IDRoom;
					}
					else
					{
						this._IDRoom = default(string);
					}
					this.SendPropertyChanged("RoomInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
